#!/bin/bash
# switch_config.sh
# Switch between Dilithium configurations

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="${PROJECT_ROOT}/configs"
SRC_DIR="${PROJECT_ROOT}/src"

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "Usage: ./switch_config.sh <config_number>"
    echo ""
    echo "Available configurations:"
    echo "  1 - Baseline (Original NIST Dilithium2)"
    echo "  2 - Tweak 1: SHA3-256 Challenge"
    echo "  3 - Tweak 2: Modified Challenge Bounds (TAU=50, OMEGA=70)"
    echo "  4 - Tweak 3: Relaxed Rejection Sampling (BETA=100)"
    echo ""
    echo "Example: ./switch_config.sh 2"
    exit 1
}

# Function to backup current config
backup_config() {
    if [ -f "${SRC_DIR}/config.h" ]; then
        cp "${SRC_DIR}/config.h" "${SRC_DIR}/config.h.backup"
        print_info "Backed up current config.h"
    fi
}

# Function to switch to config
switch_to_config() {
    local config_num=$1
    local config_name=""
    local config_desc=""
    
    case $config_num in
        1)
            config_name="baseline"
            config_desc="Baseline (Original NIST)"
            ;;
        2)
            config_name="sha3"
            config_desc="Tweak 1: SHA3-256 Challenge"
            ;;
        3)
            config_name="challenge"
            config_desc="Tweak 2: Modified Challenge Bounds"
            ;;
        4)
            config_name="rejection"
            config_desc="Tweak 3: Relaxed Rejection Sampling"
            ;;
        *)
            print_error "Invalid configuration number: $config_num"
            show_usage
            ;;
    esac
    
    print_info "Switching to Config ${config_num}: ${config_desc}"
    
    # Backup current config
    backup_config
    
    # Update config.h with selected mode
    cat > "${SRC_DIR}/config.h" << EOF
#ifndef CONFIG_H
#define CONFIG_H

/* Current Configuration: Config ${config_num} - ${config_name} */
/* Generated by switch_config.sh */

#define DILITHIUM_MODE 2
#define DILITHIUM_RANDOMIZED_SIGNING

/* Configuration-specific defines */
#define CONFIG_ID ${config_num}
#define CONFIG_NAME "${config_name}"

EOF

    # Add config-specific defines
    case $config_num in
        2)
            cat >> "${SRC_DIR}/config.h" << 'EOF'
/* Tweak 1: Enable SHA3-256 challenge generation */
#define USE_SHA3_CHALLENGE

EOF
            ;;
        3)
            cat >> "${SRC_DIR}/config.h" << 'EOF'
/* Tweak 2: Expanded challenge coefficients */
#define USE_EXPANDED_CHALLENGE
#define MODIFIED_CHALLENGE_BOUNDS
/* Challenge coefficients: {-2, -1, 0, 1, 2} instead of {-1, 0, 1} */
/* TAU will be overridden to 50 in params.h */
/* OMEGA will be overridden to 70 in params.h */

EOF
            ;;
        4)
            cat >> "${SRC_DIR}/config.h" << 'EOF'
/* Tweak 3: Relaxed rejection sampling */
#define RELAXED_REJECTION

/* Rejection sampling options: */
/* Option 1: Relax bounds - uncomment next line */
/* #define RELAXED_REJECTION_OPTION1 */

/* Option 2: Probabilistic bypass - uncomment next line */
/* #define RELAXED_REJECTION_OPTION2 */

/* Default: Simple BETA increase (BETA=100 from params_tweaked.h) */

EOF
            ;;
    esac
    
    # Add standard definitions
    cat >> "${SRC_DIR}/config.h" << 'EOF'
/* Standard definitions */
#ifndef DILITHIUM_MODE
#define DILITHIUM_MODE 2
#endif

#if DILITHIUM_MODE == 2
#define CRYPTO_ALGNAME "Dilithium2"
#define DILITHIUM_NAMESPACETOP pqcrystals_dilithium2_ref
#define DILITHIUM_NAMESPACE(s) pqcrystals_dilithium2_ref_##s
#elif DILITHIUM_MODE == 3
#define CRYPTO_ALGNAME "Dilithium3"
#define DILITHIUM_NAMESPACETOP pqcrystals_dilithium3_ref
#define DILITHIUM_NAMESPACE(s) pqcrystals_dilithium3_ref_##s
#elif DILITHIUM_MODE == 5
#define CRYPTO_ALGNAME "Dilithium5"
#define DILITHIUM_NAMESPACETOP pqcrystals_dilithium5_ref
#define DILITHIUM_NAMESPACE(s) pqcrystals_dilithium5_ref_##s
#endif

#endif /* CONFIG_H */
EOF
    
    print_success "Switched to Config ${config_num}: ${config_desc}"
    
    # Show what needs to be done next
    echo ""
    print_info "Next steps:"
    echo "  1. Clean previous build: cd src && make clean"
    echo "  2. Build with CONFIG=${config_num}: make CONFIG=${config_num} all"
    echo "  3. Run speed test: make CONFIG=${config_num} speed"
    echo ""
    print_warning "Remember to rebuild after switching configs!"
}

# Function to show current config
show_current_config() {
    if [ ! -f "${SRC_DIR}/config.h" ]; then
        print_warning "No config.h found. Run switch_config.sh first."
        return
    fi
    
    print_info "Current configuration:"
    grep "Current Configuration:" "${SRC_DIR}/config.h" | sed 's/\/\* /  /' | sed 's/ \*\///'
    
    echo ""
    print_info "Active defines:"
    grep -E "^#define (CONFIG_ID|CONFIG_NAME|USE_SHA3|MODIFIED_CHALLENGE|RELAXED_REJECTION)" "${SRC_DIR}/config.h" | sed 's/^/  /'
}

# Main script
main() {
    # Check if running from correct directory
    if [ ! -d "${SRC_DIR}" ] || [ ! -d "${CONFIG_DIR}" ]; then
        print_error "Must run from dilithium/ directory"
        print_error "Expected structure: dilithium/src/ and dilithium/configs/"
        exit 1
    fi
    
    # Parse arguments
    if [ $# -eq 0 ]; then
        show_current_config
        echo ""
        show_usage
    fi
    
    case "$1" in
        -h|--help)
            show_usage
            ;;
        -s|--show|status)
            show_current_config
            ;;
        1|2|3|4)
            switch_to_config "$1"
            ;;
        *)
            print_error "Invalid argument: $1"
            show_usage
            ;;
    esac
}

# Run main function
main "$@"